-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\amand\OneDrive\Dokument\MATLAB\ReCog_nn\ReCog\nn_v2_amanda\ANN_ReLu\codegen\forwardProp2\hdlsrc\forwardProp2_fixpt.vhd
-- Created: 2022-04-30 11:59:40
-- 
-- Generated by MATLAB 9.10, MATLAB Coder 5.2 and HDL Coder 3.18
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: forwardProp2_fixpt
-- Source Path: forwardProp2_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.forwardProp2_fixpt_pkg.ALL;

ENTITY forwardProp2_fixpt IS
  PORT( weights_11                        :   IN    vector_of_std_logic_vector14(0 TO 7);  -- sfix14_En10 [8]
        weights_12                        :   IN    vector_of_std_logic_vector14(0 TO 7);  -- sfix14_En10 [8]
        weights_13                        :   IN    vector_of_std_logic_vector14(0 TO 7);  -- sfix14_En10 [8]
        weights_14                        :   IN    vector_of_std_logic_vector14(0 TO 7);  -- sfix14_En10 [8]
        weights_21                        :   IN    vector_of_std_logic_vector14(0 TO 3);  -- sfix14_En10 [4]
        weights_22                        :   IN    vector_of_std_logic_vector14(0 TO 3);  -- sfix14_En10 [4]
        weights_3                         :   IN    vector_of_std_logic_vector14(0 TO 1);  -- sfix14_En10 [2]
        input                             :   IN    vector_of_std_logic_vector14(0 TO 7);  -- sfix14_En4 [8]
        out_h1                            :   OUT   vector_of_std_logic_vector14(0 TO 3);  -- sfix14_En2 [4]
        w_h1                              :   OUT   vector_of_std_logic_vector14(0 TO 3);  -- sfix14_En2 [4]
        out_h2                            :   OUT   vector_of_std_logic_vector14(0 TO 1);  -- sfix14_En1 [2]
        w_h2                              :   OUT   vector_of_std_logic_vector14(0 TO 1);  -- sfix14_En1 [2]
        output                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14
        );
END forwardProp2_fixpt;


ARCHITECTURE rtl OF forwardProp2_fixpt IS

  -- Signals
  SIGNAL weights_11_signed                : vector_of_signed14(0 TO 7);  -- sfix14_En10 [8]
  SIGNAL weights_12_signed                : vector_of_signed14(0 TO 7);  -- sfix14_En10 [8]
  SIGNAL weights_13_signed                : vector_of_signed14(0 TO 7);  -- sfix14_En10 [8]
  SIGNAL weights_14_signed                : vector_of_signed14(0 TO 7);  -- sfix14_En10 [8]
  SIGNAL weights_21_signed                : vector_of_signed14(0 TO 3);  -- sfix14_En10 [4]
  SIGNAL weights_22_signed                : vector_of_signed14(0 TO 3);  -- sfix14_En10 [4]
  SIGNAL weights_3_signed                 : vector_of_signed14(0 TO 1);  -- sfix14_En10 [2]
  SIGNAL input_signed                     : vector_of_signed14(0 TO 7);  -- sfix14_En4 [8]
  SIGNAL out_h1_tmp                       : vector_of_signed14(0 TO 3);  -- sfix14_En2 [4]
  SIGNAL w_h1_tmp                         : vector_of_signed14(0 TO 3);  -- sfix14_En2 [4]
  SIGNAL out_h2_tmp                       : vector_of_signed14(0 TO 1);  -- sfix14_En1 [2]
  SIGNAL w_h2_tmp                         : vector_of_signed14(0 TO 1);  -- sfix14_En1 [2]
  SIGNAL output_tmp                       : signed(13 DOWNTO 0);  -- sfix14

BEGIN
  outputgen11: FOR k1 IN 0 TO 7 GENERATE
    weights_11_signed(k1) <= signed(weights_11(k1));
  END GENERATE;

  outputgen10: FOR k1 IN 0 TO 7 GENERATE
    weights_12_signed(k1) <= signed(weights_12(k1));
  END GENERATE;

  outputgen9: FOR k1 IN 0 TO 7 GENERATE
    weights_13_signed(k1) <= signed(weights_13(k1));
  END GENERATE;

  outputgen8: FOR k1 IN 0 TO 7 GENERATE
    weights_14_signed(k1) <= signed(weights_14(k1));
  END GENERATE;

  outputgen7: FOR k1 IN 0 TO 3 GENERATE
    weights_21_signed(k1) <= signed(weights_21(k1));
  END GENERATE;

  outputgen6: FOR k1 IN 0 TO 3 GENERATE
    weights_22_signed(k1) <= signed(weights_22(k1));
  END GENERATE;

  outputgen5: FOR k1 IN 0 TO 1 GENERATE
    weights_3_signed(k1) <= signed(weights_3(k1));
  END GENERATE;

  outputgen4: FOR k1 IN 0 TO 7 GENERATE
    input_signed(k1) <= signed(input(k1));
  END GENERATE;

  forwardProp2_fixpt_1_output : PROCESS (input_signed, weights_11_signed, weights_12_signed, weights_13_signed,
       weights_14_signed, weights_21_signed, weights_22_signed,
       weights_3_signed)
    VARIABLE weights_1 : vector_of_signed14(0 TO 31);
    VARIABLE weights_2 : vector_of_signed14(0 TO 7);
    VARIABLE y : vector_of_signed14(0 TO 31);
    VARIABLE c : vector_of_signed31(0 TO 3);
    VARIABLE out_h11 : vector_of_signed14(0 TO 3);
    VARIABLE maxval : vector_of_signed14(0 TO 3);
    VARIABLE y_0 : vector_of_signed14(0 TO 7);
    VARIABLE c_0 : vector_of_signed30(0 TO 1);
    VARIABLE out_h21 : vector_of_signed14(0 TO 1);
    VARIABLE maxval_0 : vector_of_signed14(0 TO 1);
    VARIABLE c_1 : signed(28 DOWNTO 0);
    VARIABLE tmp : signed(13 DOWNTO 0);
    VARIABLE tmp_0 : signed(13 DOWNTO 0);
    VARIABLE add_cast : vector_of_signed64(0 TO 3);
    VARIABLE add_cast_0 : vector_of_signed64(0 TO 3);
    VARIABLE add_cast_1 : vector_of_signed32(0 TO 7);
    VARIABLE add_cast_2 : vector_of_signed64(0 TO 7);
    VARIABLE mul_temp : vector_of_signed28(0 TO 7);
    VARIABLE add_cast_3 : vector_of_signed32(0 TO 7);
    VARIABLE add_temp : vector_of_signed32(0 TO 7);
    VARIABLE add_cast_4 : vector_of_signed31(0 TO 3);
    VARIABLE add_cast_5 : vector_of_signed64(0 TO 3);
    VARIABLE mul_temp_0 : vector_of_signed28(0 TO 3);
    VARIABLE add_cast_6 : vector_of_signed31(0 TO 3);
    VARIABLE add_temp_0 : vector_of_signed31(0 TO 3);
    VARIABLE add_cast_7 : vector_of_signed64(0 TO 1);
    VARIABLE add_cast_8 : vector_of_signed64(0 TO 1);
    VARIABLE add_cast_9 : vector_of_signed30(0 TO 1);
    VARIABLE mul_temp_1 : vector_of_signed28(0 TO 1);
    VARIABLE add_cast_10 : vector_of_signed30(0 TO 1);
    VARIABLE add_temp_1 : vector_of_signed30(0 TO 1);
  BEGIN
    tmp := to_signed(16#0000#, 14);
    tmp_0 := to_signed(16#0000#, 14);
    --HDL code generation from MATLAB function: forwardProp2_fixpt
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --Feed-forward function for network with 2 layers
    --since hdl coder does not like matrices as input, devide weight
    --matrices into vectors as input and then combine them to one nice
    --matrix.
    weights_1 := (OTHERS => to_signed(16#0000#, 14));
    weights_1(0 TO 7) := weights_11_signed(0 TO 7);
    weights_1(8 TO 15) := weights_12_signed(0 TO 7);
    weights_1(16 TO 23) := weights_13_signed(0 TO 7);
    weights_1(24 TO 31) := weights_14_signed(0 TO 7);
    weights_2 := (OTHERS => to_signed(16#0000#, 14));
    weights_2(0 TO 3) := weights_21_signed(0 TO 3);
    weights_2(4 TO 7) := weights_22_signed(0 TO 3);

    FOR t_1 IN 0 TO 7 LOOP
      FOR t_0 IN 0 TO 3 LOOP
        add_cast(t_0) := resize(to_signed(t_1, 32) & '0' & '0', 64);
        add_cast_0(t_0) := resize(to_signed(t_0, 32) & '0' & '0' & '0', 64);
        y(to_integer(to_signed(t_0, 32) + resize(add_cast(t_0), 32))) := weights_1(to_integer(to_signed(t_1, 32) + resize(add_cast_0(t_0), 32)));
      END LOOP;
    END LOOP;


    FOR l IN 0 TO 3 LOOP
      c(l) := to_signed(16#00000000#, 31);

      FOR k IN 0 TO 7 LOOP
        add_cast_1(k) := resize(c(l), 32);
        add_cast_2(k) := resize(to_signed(k, 32) & '0' & '0', 64);
        mul_temp(k) := y(to_integer(to_signed(l, 32) + resize(add_cast_2(k), 32))) * input_signed(k);
        add_cast_3(k) := resize(mul_temp(k), 32);
        add_temp(k) := add_cast_1(k) + add_cast_3(k);
        c(l) := add_temp(k)(30 DOWNTO 0);
      END LOOP;

      out_h11(l) := c(l)(25 DOWNTO 12);
      IF out_h11(l) < to_signed(16#0000#, 14) THEN 
        tmp := to_signed(16#0000#, 14);
      ELSE 
        tmp := out_h11(l);
      END IF;
      maxval(l) := tmp;

      FOR t_2 IN 0 TO 1 LOOP
        add_cast_7(t_2) := resize(to_signed(l, 32) & '0', 64);
        add_cast_8(t_2) := resize(to_signed(t_2, 32) & '0' & '0', 64);
        y_0(to_integer(to_signed(t_2, 32) + resize(add_cast_7(t_2), 32))) := weights_2(to_integer(to_signed(l, 32) + resize(add_cast_8(t_2), 32)));
      END LOOP;

    END LOOP;

    c_1 := to_signed(16#00000000#, 29);

    FOR l_0 IN 0 TO 1 LOOP
      c_0(l_0) := to_signed(16#00000000#, 30);

      FOR k_0 IN 0 TO 3 LOOP
        add_cast_4(k_0) := resize(c_0(l_0), 31);
        add_cast_5(k_0) := resize(to_signed(k_0, 32) & '0', 64);
        mul_temp_0(k_0) := y_0(to_integer(to_signed(l_0, 32) + resize(add_cast_5(k_0), 32))) * maxval(k_0);
        add_cast_6(k_0) := resize(mul_temp_0(k_0), 31);
        add_temp_0(k_0) := add_cast_4(k_0) + add_cast_6(k_0);
        c_0(l_0) := add_temp_0(k_0)(29 DOWNTO 0);
      END LOOP;

      out_h21(l_0) := c_0(l_0)(24 DOWNTO 11);
      IF out_h21(l_0) < to_signed(16#0000#, 14) THEN 
        tmp_0 := to_signed(16#0000#, 14);
      ELSE 
        tmp_0 := out_h21(l_0);
      END IF;
      maxval_0(l_0) := tmp_0;
      add_cast_9(l_0) := resize(c_1, 30);
      mul_temp_1(l_0) := weights_3_signed(l_0) * maxval_0(l_0);
      add_cast_10(l_0) := resize(mul_temp_1(l_0), 30);
      add_temp_1(l_0) := add_cast_9(l_0) + add_cast_10(l_0);
      c_1 := add_temp_1(l_0)(28 DOWNTO 0);
    END LOOP;

    out_h1_tmp <= maxval;
    w_h1_tmp <= out_h11;
    out_h2_tmp <= maxval_0;
    w_h2_tmp <= out_h21;
    output_tmp <= c_1(24 DOWNTO 11);
  END PROCESS forwardProp2_fixpt_1_output;


  outputgen3: FOR k1 IN 0 TO 3 GENERATE
    out_h1(k1) <= std_logic_vector(out_h1_tmp(k1));
  END GENERATE;

  outputgen2: FOR k1 IN 0 TO 3 GENERATE
    w_h1(k1) <= std_logic_vector(w_h1_tmp(k1));
  END GENERATE;

  outputgen1: FOR k1 IN 0 TO 1 GENERATE
    out_h2(k1) <= std_logic_vector(out_h2_tmp(k1));
  END GENERATE;

  outputgen: FOR k1 IN 0 TO 1 GENERATE
    w_h2(k1) <= std_logic_vector(w_h2_tmp(k1));
  END GENERATE;

  output <= std_logic_vector(output_tmp);

END rtl;

