-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ANN\Classify.vhd
-- Created: 2022-05-21 11:54:13
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Classify
-- Source Path: ANN/HDL_ANN/Classify
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_ANN_pkg.ALL;

ENTITY Classify IS
  PORT( x                                 :   IN    vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En12 [2]
        w1                                :   IN    matrix_of_std_logic_vector18(0 TO 3, 0 TO 1);  -- sfix18_En12 [4x2]
        w2                                :   IN    matrix_of_std_logic_vector18(0 TO 1, 0 TO 3);  -- sfix18_En12 [2x4]
        w3                                :   IN    vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En12 [2]
        b1                                :   IN    vector_of_std_logic_vector18(0 TO 3);  -- sfix18_En12 [4]
        b2                                :   IN    vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En12 [2]
        b3                                :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        a1                                :   OUT   vector_of_std_logic_vector18(0 TO 3);  -- sfix18_En12 [4]
        a2                                :   OUT   vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En12 [2]
        a3                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        z1                                :   OUT   vector_of_std_logic_vector18(0 TO 3);  -- sfix18_En12 [4]
        z2                                :   OUT   vector_of_std_logic_vector18(0 TO 1)  -- sfix18_En12 [2]
        );
END Classify;


ARCHITECTURE rtl OF Classify IS

  -- Component Declarations
  COMPONENT L1
    PORT( a                               :   IN    vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En12 [2]
          w                               :   IN    matrix_of_std_logic_vector18(0 TO 3, 0 TO 1);  -- sfix18_En12 [4x2]
          b                               :   IN    vector_of_std_logic_vector18(0 TO 3);  -- sfix18_En12 [4]
          z_out                           :   OUT   vector_of_std_logic_vector18(0 TO 3);  -- sfix18_En12 [4]
          a_out                           :   OUT   vector_of_std_logic_vector18(0 TO 3)  -- sfix18_En12 [4]
          );
  END COMPONENT;

  COMPONENT L2
    PORT( a                               :   IN    vector_of_std_logic_vector18(0 TO 3);  -- sfix18_En12 [4]
          w                               :   IN    matrix_of_std_logic_vector18(0 TO 1, 0 TO 3);  -- sfix18_En12 [2x4]
          b                               :   IN    vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En12 [2]
          z_out                           :   OUT   vector_of_std_logic_vector18(0 TO 1);  -- sfix18_En12 [2]
          a_out                           :   OUT   vector_of_std_logic_vector18(0 TO 1)  -- sfix18_En12 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : L1
    USE ENTITY work.L1(rtl);

  FOR ALL : L2
    USE ENTITY work.L2(rtl);

  -- Signals
  SIGNAL L1_out1                          : vector_of_std_logic_vector18(0 TO 3);  -- ufix18 [4]
  SIGNAL L1_out2                          : vector_of_std_logic_vector18(0 TO 3);  -- ufix18 [4]
  SIGNAL L2_out1                          : vector_of_std_logic_vector18(0 TO 1);  -- ufix18 [2]
  SIGNAL L2_out2                          : vector_of_std_logic_vector18(0 TO 1);  -- ufix18 [2]
  SIGNAL selector_out                     : vector_of_std_logic_vector18(0 TO 1);  -- ufix18 [2]
  SIGNAL selector_out_1                   : vector_of_signed18(0 TO 1);  -- sfix18_En12 [2]
  SIGNAL s                                : vector_of_signed18(0 TO 1);  -- sfix18_En12 [2]
  SIGNAL selector_out_2                   : vector_of_std_logic_vector18(0 TO 1);  -- ufix18 [2]
  SIGNAL selector_out_3                   : vector_of_signed18(0 TO 1);  -- sfix18_En12 [2]
  SIGNAL s_1                              : vector_of_signed18(0 TO 1);  -- sfix18_En12 [2]
  SIGNAL MMul_dot_product_mul_temp        : vector_of_signed36(0 TO 1);  -- sfix36_En24 [2]
  SIGNAL MMul_dot_product_out             : vector_of_signed18(0 TO 1);  -- sfix18_En12 [2]
  SIGNAL MMul_dot_product_out_0           : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL b3_signed                        : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL MMul_dot_product_out_1           : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL MatrixMultiply_out1              : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Add_out1                         : signed(17 DOWNTO 0);  -- sfix18_En12

BEGIN
  -- Output Layer

  u_L1 : L1
    PORT MAP( a => x,  -- sfix18_En12 [2]
              w => w1,  -- sfix18_En12 [4x2]
              b => b1,  -- sfix18_En12 [4]
              z_out => L1_out1,  -- sfix18_En12 [4]
              a_out => L1_out2  -- sfix18_En12 [4]
              );

  u_L2 : L2
    PORT MAP( a => L1_out2,  -- sfix18_En12 [4]
              w => w2,  -- sfix18_En12 [2x4]
              b => b2,  -- sfix18_En12 [2]
              z_out => L2_out1,  -- sfix18_En12 [2]
              a_out => L2_out2  -- sfix18_En12 [2]
              );

  selector_out(0) <= w3(0);
  selector_out(1) <= w3(1);

  outputgen1: FOR k IN 0 TO 1 GENERATE
    selector_out_1(k) <= signed(selector_out(k));
  END GENERATE;

  sGEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
    s(d0) <= selector_out_1(d0);
  END GENERATE;

  selector_out_2(0) <= L2_out2(0);
  selector_out_2(1) <= L2_out2(1);

  outputgen: FOR k IN 0 TO 1 GENERATE
    selector_out_3(k) <= signed(selector_out_2(k));
  END GENERATE;

  s_1GEN_LABEL: FOR d0 IN 0 TO 1 GENERATE
    s_1(d0) <= selector_out_3(d0);
  END GENERATE;


  MMul_dot_product_out_gen: FOR t_0 IN 0 TO 1 GENERATE
    MMul_dot_product_mul_temp(t_0) <= s(t_0) * s_1(t_0);
    MMul_dot_product_out(t_0) <= MMul_dot_product_mul_temp(t_0)(29 DOWNTO 12);
  END GENERATE MMul_dot_product_out_gen;


  MMul_dot_product_out_0 <= MMul_dot_product_out(0);

  b3_signed <= signed(b3);

  MMul_dot_product_out_1 <= MMul_dot_product_out(1);

  MatrixMultiply_out1 <= MMul_dot_product_out_0 + MMul_dot_product_out_1;

  Add_out1 <= b3_signed + MatrixMultiply_out1;

  a3 <= std_logic_vector(Add_out1);

  a1 <= L1_out2;

  a2 <= L2_out2;

  z1 <= L1_out1;

  z2 <= L2_out1;

END rtl;

